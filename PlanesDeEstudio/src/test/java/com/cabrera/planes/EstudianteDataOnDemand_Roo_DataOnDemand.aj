// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.cabrera.planes;

import com.cabrera.planes.Estudiante;
import com.cabrera.planes.EstudianteDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect EstudianteDataOnDemand_Roo_DataOnDemand {
    
    declare @type: EstudianteDataOnDemand: @Component;
    
    private Random EstudianteDataOnDemand.rnd = new SecureRandom();
    
    private List<Estudiante> EstudianteDataOnDemand.data;
    
    public Estudiante EstudianteDataOnDemand.getNewTransientEstudiante(int index) {
        Estudiante obj = new Estudiante();
        setApellido(obj, index);
        setBiografia(obj, index);
        setEmail(obj, index);
        setFechaNacimiento(obj, index);
        setNombre(obj, index);
        return obj;
    }
    
    public void EstudianteDataOnDemand.setApellido(Estudiante obj, int index) {
        String apellido = "apellido_" + index;
        obj.setApellido(apellido);
    }
    
    public void EstudianteDataOnDemand.setBiografia(Estudiante obj, int index) {
        String biografia = "biografia_" + index;
        obj.setBiografia(biografia);
    }
    
    public void EstudianteDataOnDemand.setEmail(Estudiante obj, int index) {
        String email = "foo" + index + "@bar.com";
        obj.setEmail(email);
    }
    
    public void EstudianteDataOnDemand.setFechaNacimiento(Estudiante obj, int index) {
        Date fechaNacimiento = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setFechaNacimiento(fechaNacimiento);
    }
    
    public void EstudianteDataOnDemand.setNombre(Estudiante obj, int index) {
        String nombre = "nombre_" + index;
        obj.setNombre(nombre);
    }
    
    public Estudiante EstudianteDataOnDemand.getSpecificEstudiante(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Estudiante obj = data.get(index);
        Long id = obj.getId();
        return Estudiante.findEstudiante(id);
    }
    
    public Estudiante EstudianteDataOnDemand.getRandomEstudiante() {
        init();
        Estudiante obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Estudiante.findEstudiante(id);
    }
    
    public boolean EstudianteDataOnDemand.modifyEstudiante(Estudiante obj) {
        return false;
    }
    
    public void EstudianteDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Estudiante.findEstudianteEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Estudiante' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Estudiante>();
        for (int i = 0; i < 10; i++) {
            Estudiante obj = getNewTransientEstudiante(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
